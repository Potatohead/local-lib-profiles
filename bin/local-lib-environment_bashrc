#TODO
# - Going to have to look at the possibility of putting the current active
#   environments names somewhere which opens up the possibility of deactivating
#   and lets me stop people from deleting active environments and activating
#   something twice. Can also get it into the prompt somehow
# - existence of .modulebuildrc in a directory means its an environment


# Make sure there is a default value for WORKON_HOME.
# You can override this setting in your .bashrc.
if [ "$LOCAL_LIB_HOME" = "" ]
then
    export LOCAL_LIB_HOME="$HOME/.perl-environments"
fi

# Normalize the directory name in case it includes 
# relative path components.
LOCAL_LIB_HOME=$(sh -c 'cd "$LOCAL_LIB_HOME"; pwd')
export LOCAL_LIB_HOME

# Verify that the local lib home exists
function local-lib_verify_home () {
    if [ ! -d "$LOCAL_LIB_HOME" ]
    then
        echo "ERROR: local lib environments directory '$LOCAL_LIB_HOME' does not exist." >&2
        return 1
    fi
    return 0
}

# Verify that the named environment in the local lib home exists
function local-lib_verify_home_environment () {
    typeset env_name="$1"
    if [ ! -d "$LOCAL_LIB_HOME/$env_name" ]
    then
        echo "ERROR: Environment '$env_name' does not exist." >&2
        return 1
    fi
    return 0
}

# Verify that the active environment exists
function local-lib_verify_active_environment () {
    if [ ! -n "${PERL_ENV}" ] || [ ! -d "${PERL_ENV}" ]
    then
        echo "ERROR: no environment active, or active environment is missing" >&2
        return 1
    fi
    return 0
}

#changes directory to the currently active environment
function local-lib_cdenv () {
    local-lib_verify_active_environment || return 1
    cd $PERL_ENV/$1
}

# List the available environments.
function local-lib_show_workon_options () {
    local-lib_verify_home  || return 1
    # NOTE: DO NOT use ls here because colorized versions spew control characters
    #       into the output list.
    # echo seems a little faster than find, even with -depth 3.
    (cd "$LOCAL_LIB_HOME"; for f in */.modulebuildrc; do echo $f; done) | sed 's|^\./||' | sed 's|/.modulebuildrc||' | sort
}

# Create a new environment in local lib home
function local-lib_mkenv () {
    eval "envname=\$$#"
    local-lib_verify_home || return 1
    perl -e "use local::lib::environment; local::lib::environment::make_environment(directory => '$LOCAL_LIB_HOME/$envname');"
}

# Remove an existing environment from local lib home
function local-lib_rmenv () {
    typeset env_name="$1"
    local-lib_verify_home || return 1
    if [ "$env_name"  = "" ]
    then
        echo "Please specify an environment." >&2
        return 1
    fi
    
    local-lib_verify_home_environment $env_name || return 1
    env_dir="$LOCAL_LIB_HOME/$env_name"

    # check here if its the active environment somehow
    if [ "$PERL_ENV" = "$env_dir" ]
    then
        echo "ERROR: You cannot remove the active environment ('$env_name')." >&2
        echo "Either switch to another environment, or run 'deactivate'." >&2
        return 1
    fi
    
    rm -rf "$env_dir"
}

# takes an existing local-lib or local-lib-environment and upgrades its support
# scripts
function local-lib_upgrade_env () {
    typeset env_dir="$1"

    if [ ! -d "${env_dir}" ]
    then
        echo "ERROR: the environment directory does not exist" >&2
        return 1
    fi

    local-lib_verify_home || return 1
    perl -e "use local::lib::environment; local::lib::environment::upgrade_environment(directory => '$env_dir');"
}

# Activate a named environment
function local-lib_workon () {
    typeset env_name="$1"
    if [ "$env_name" = "" ]
    then
        # Return the list of available environments
        local-lib_show_workon_options
        return 1
    fi

    local-lib_verify_home || return 1
    local-lib_verify_home_environment || return 1

    activate="$LOCAL_LIB_HOME/$env_name/bin/local-lib_activate"

    if [ ! -f "$activate" ]
    then
        echo "ERROR: Environment '$WORKON_HOME/$env_name' does not contain an activate script." >&2
        return 1
    fi

    # Deactivate any current environment "destructively"
    # before switching so we use our override function,
    # if it exists.
    type local-lib_deactivate >/dev/null 2>&1
    if [ $? -eq 0 ]
    then
        local-lib_deactivate
    fi
    
    source "$activate"
}

if [ -n "$BASH" ] ; then
    _perlenvs ()
    {
        local cur="${COMP_WORDS[COMP_CWORD]}"
        COMPREPLY=( $(compgen -W "`local-lib_show_workon_options`" -- ${cur}) )
    }

    _cdperlenv_complete ()
    {
        local cur="$2"
        # COMPREPLY=( $(compgen -d -- "${VIRTUAL_ENV}/${cur}" | sed -e "s@${VIRTUAL_ENV}/@@" ) )
        COMPREPLY=( $(local-lib_cdenv && compgen -d -- "${cur}" ) )
    }
    complete -o nospace -F _cdperlenv_complete -S/ local-lib_cdenv
    complete -o default -o nospace -F _perlenvs local-lib_workon
    complete -o default -o nospace -F _perlenvs local-lib_rmenv
elif [ -n "$ZSH_VERSION" ] ; then
    compctl -g "`local-lib_show_workon_options`" workon rmvirtualenv
fi

